---
# 디렉토리 생성 (repo_host에서만)
- name: Create directories for registry (repo only)
  ansible.builtin.file:
    path: "{{ registry_dir }}/{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - auth
    - certs
    - data

# htpasswd 생성 (repo_host에서만)
- name: Generate htpasswd file (repo only)
  ansible.builtin.command:
    cmd: "htpasswd -bBc {{ registry_dir }}/auth/htpasswd {{ registry_user }} {{ registry_password }}"
  args:
    creates: "{{ registry_dir }}/auth/htpasswd"

# === CA 생성 ===
- name: CA openssl config
  ansible.builtin.template:
    src: registry-ca.cnf.j2
    dest: "{{ registry_dir }}/certs/ca.cnf"
    mode: '0644'

- name: Generate CA private key
  ansible.builtin.command: "openssl genrsa -out {{ registry_dir }}/certs/ca.key 4096"
  args: { creates: "{{ registry_dir }}/certs/ca.key" }

- name: Generate CA certificate (self-signed)
  ansible.builtin.command: >
    openssl req -x509 -new -nodes
    -key {{ registry_dir }}/certs/ca.key
    -sha256 -days 3650
    -out {{ registry_dir }}/certs/ca.crt
    -config {{ registry_dir }}/certs/ca.cnf
    -extensions v3_ca
  args: { creates: "{{ registry_dir }}/certs/ca.crt" }

# === 서버 키/CSR/서명 ===
- name: Server openssl config
  ansible.builtin.template:
    src: registry-server.cnf.j2
    dest: "{{ registry_dir }}/certs/server.cnf"
    mode: '0644'

- name: Generate server private key
  ansible.builtin.command: "openssl genrsa -out {{ registry_dir }}/certs/domain.key 4096"
  args: { creates: "{{ registry_dir }}/certs/domain.key" }

- name: Generate server CSR
  ansible.builtin.command: >
    openssl req -new
    -key {{ registry_dir }}/certs/domain.key
    -out {{ registry_dir }}/certs/domain.csr
    -config {{ registry_dir }}/certs/server.cnf
  args: { creates: "{{ registry_dir }}/certs/domain.csr" }

- name: Sign server cert with our CA
  ansible.builtin.command: >
    openssl x509 -req
    -in {{ registry_dir }}/certs/domain.csr
    -CA {{ registry_dir }}/certs/ca.crt
    -CAkey {{ registry_dir }}/certs/ca.key
    -CAcreateserial
    -out {{ registry_dir }}/certs/domain.crt
    -days 1825 -sha256
    -extensions v3_req
    -extfile {{ registry_dir }}/certs/server.cnf
  args: { creates: "{{ registry_dir }}/certs/domain.crt" }

# 레지스트리 컨테이너 기동/재기동 (서버 cert 사용)
- name: Start/Restart registry container with TLS
  containers.podman.podman_container:
    name: myregistry
    image: docker.io/library/registry:2
    state: started
    recreate: true
    restart_policy: always
    ports:
      - "{{ registry_port }}:5000"
    volume:
      - "{{ registry_dir }}/data:/var/lib/registry:z"
      - "{{ registry_dir }}/auth:/auth:z"
      - "{{ registry_dir }}/certs:/certs:z"
    env:
      REGISTRY_AUTH: "htpasswd"
      REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
      REGISTRY_AUTH_HTPASSWD_PATH: "/auth/htpasswd"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/domain.crt"
      REGISTRY_HTTP_TLS_KEY: "/certs/domain.key"
      REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED: "true"

# 방화벽
- name: Allow registry port on firewall (public)
  ansible.posix.firewalld:
    port: "{{ registry_port }}/tcp"
    permanent: true
    state: enabled
    zone: public
  notify: reload firewall

- name: Allow registry port on firewall (internal)
  ansible.posix.firewalld:
    port: "{{ registry_port }}/tcp"
    permanent: true
    state: enabled
    zone: internal
  notify: reload firewall

# 접근 확인 (repo_host에서만)
- name: Verify registry access (HTTPS)
  ansible.builtin.command: "curl -k https://{{ registry_host }}:{{ registry_port }}/v2/_catalog"
  register: verify_registry
  changed_when: false

- name: Debug registry access result
  ansible.builtin.debug:
    msg: "{{ verify_registry.stdout }}"
